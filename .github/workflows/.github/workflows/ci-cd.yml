name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      ai-engine: ${{ steps.changes.outputs.ai-engine }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'frontend/**'
          ai-engine:
            - 'ai-engine/**'
          infrastructure:
            - 'infrastructure/**'
            - '.github/workflows/**'

  test-backend:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run Tests
      working-directory: ./backend
      run: npm test
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage

  test-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run Tests
      working-directory: ./frontend
      run: npm test
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage

  test-ai-engine:
    needs: changes
    if: ${{ needs.changes.outputs.ai-engine == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('ai-engine/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Dependencies
      working-directory: ./ai-engine
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Tests
      working-directory: ./ai-engine
      run: pytest --cov=. --cov-report=xml
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        directory: ./ai-engine

  e2e-tests:
    needs: [test-backend, test-frontend, test-ai-engine]
    if: ${{ always() && !failure() }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Start Services
      run: docker-compose up -d
      
    - name: Wait for Services
      run: ./scripts/wait-for-services.sh
    
    - name: Run E2E Tests
      run: npm run test:e2e
    
    - name: Stop Services
      if: always()
      run: docker-compose down

  build-and-deploy:
    needs: [test-backend, test-frontend, test-ai-engine, e2e-tests]
    if: ${{ github.ref == 'refs/heads/main' && success() }}
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and Push Images
      run: |
        docker buildx build --platform linux/amd64,linux/arm64 \
          --tag ${{ secrets.CONTAINER_REGISTRY }}/ai-platform-backend:${{ github.sha }} \
          --tag ${{ secrets.CONTAINER_REGISTRY }}/ai-platform-backend:latest \
          --push ./backend
        
        docker buildx build --platform linux/amd64,linux/arm64 \
          --tag ${{ secrets.CONTAINER_REGISTRY }}/ai-platform-frontend:${{ github.sha }} \
          --tag ${{ secrets.CONTAINER_REGISTRY }}/ai-platform-frontend:latest \
          --push ./frontend
        
        docker buildx build --platform linux/amd64,linux/arm64 \
          --tag ${{ secrets.CONTAINER_REGISTRY }}/ai-platform-ai-engine:${{ github.sha }} \
          --tag ${{ secrets.CONTAINER_REGISTRY }}/ai-platform-ai-engine:latest \
          --push ./ai-engine
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production..."
        # Add deployment logic here
