services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations/001_create_schema.sql:/docker-entrypoint-initdb.d/001_create_schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - myco-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - myco-network

  # AI Engine
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    env_file:
      - ./ai-engine/.env.production
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - myco-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env.production
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ai-engine:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 40s
    networks:
      - myco-network

  # Execution Engine
  execution-engine:
    build:
      context: ./execution-engine
      dockerfile: Dockerfile
    environment:
      - REDIS_URL=redis://redis:6379
      - EXECUTION_ENGINE_PORT=8002
    ports:
      - "8002:8002"
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - myco-network

  # Template Engine
  template-engine:
    build:
      context: ./template-engine
      dockerfile: Dockerfile
    environment:
      - TEMPLATE_ENGINE_PORT=8003
    ports:
      - "8003:8003"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - myco-network

  # Validation Engine
  validation-engine:
    build:
      context: ./validation-engine
      dockerfile: Dockerfile
    environment:
      - VALIDATION_ENGINE_PORT=8004
    ports:
      - "8004:8004"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - myco-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env.production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 30s
    networks:
      - myco-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  myco-network:
    driver: bridge