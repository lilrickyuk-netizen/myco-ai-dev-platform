---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: myco-production
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'myco-ai-production'
        
    rule_files:
      - "/etc/prometheus/rules/*.yml"
      
    scrape_configs:
      - job_name: 'myco-ai-platform'
        static_configs:
          - targets: ['myco-ai-platform:8080']
        metrics_path: '/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s
        
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
            
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: myco-production
data:
  alert-rules.yml: |
    groups:
      - name: myco-ai-platform.slo
        interval: 30s
        rules:
          - alert: HighLatencyP95
            expr: http_request_duration_seconds_p95{service="myco-ai-platform"} > 2
            for: 2m
            labels:
              severity: critical
              service: myco-ai-platform
              slo_type: latency
            annotations:
              summary: "High P95 latency detected"
              description: "P95 latency is {{ $value }}s, which exceeds the 2s SLO threshold"
              
          - alert: HighErrorRate
            expr: http_request_error_rate{service="myco-ai-platform"} > 0.01
            for: 1m
            labels:
              severity: critical
              service: myco-ai-platform
              slo_type: error_rate
            annotations:
              summary: "High error rate detected"
              description: "Error rate is {{ $value | humanizePercentage }}, which exceeds the 1% SLO threshold"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: myco-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.40.0
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus/
        - name: rules-volume
          mountPath: /etc/prometheus/rules/
        - name: storage-volume
          mountPath: /prometheus/
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
      - name: rules-volume
        configMap:
          name: prometheus-rules
      - name: storage-volume
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: myco-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: myco-production
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: myco-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:9.3.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_USER
          value: admin
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-admin
              key: password
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboards
          mountPath: /etc/grafana/dashboards
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: myco-production
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: myco-production
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000

---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: myco-production
type: Opaque
data:
  password: YWRtaW4xMjM=  # base64 encoded 'admin123' - change in production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: myco-production
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: myco-production
data:
  dashboards.yml: |
    apiVersion: 1
    providers:
      - name: 'default'
        type: file
        updateIntervalSeconds: 30
        options:
          path: /etc/grafana/dashboards

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: myco-production
data:
  production-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Myco AI Platform - Production Overview",
        "tags": ["myco-ai", "production"],
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{service=\"myco-ai-platform\"}[5m])",
                "legendFormat": "Requests/sec"
              }
            ]
          },
          {
            "id": 2,
            "title": "P95 Latency",
            "type": "graph",
            "targets": [
              {
                "expr": "http_request_duration_seconds_p95{service=\"myco-ai-platform\"}",
                "legendFormat": "P95 Latency"
              }
            ]
          },
          {
            "id": 3,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "http_request_error_rate{service=\"myco-ai-platform\"}",
                "legendFormat": "Error Rate"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }