export interface Template {
  name: string;
  language: string;
  framework?: string;
  files: TemplateFile[];
  dependencies: string[];
  scripts: Record<string, string>;
}

export interface TemplateFile {
  path: string;
  content: string;
  description: string;
}

const templates: Template[] = [
  {
    name: "react-typescript",
    language: "typescript",
    framework: "react",
    files: [
      {
        path: "src/App.tsx",
        content: `import React from 'react';

function App() {
  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-4xl font-bold text-gray-800 mb-4">
          Welcome to Your React App
        </h1>
        <p className="text-gray-600">
          Start building something amazing!
        </p>
      </div>
    </div>
  );
}

export default App;`,
        description: "Main React application component"
      },
      {
        path: "src/main.tsx",
        content: `import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
        description: "Application entry point"
      },
      {
        path: "src/index.css",
        content: `@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}`,
        description: "Global styles"
      },
      {
        path: "package.json",
        content: JSON.stringify({
          name: "react-typescript-app",
          private: true,
          version: "0.0.0",
          type: "module",
          scripts: {
            dev: "vite",
            build: "tsc && vite build",
            preview: "vite preview"
          },
          dependencies: {
            react: "^18.2.0",
            "react-dom": "^18.2.0"
          },
          devDependencies: {
            "@types/react": "^18.2.43",
            "@types/react-dom": "^18.2.17",
            "@vitejs/plugin-react": "^4.2.1",
            autoprefixer: "^10.4.16",
            postcss: "^8.4.32",
            tailwindcss: "^3.3.6",
            typescript: "^5.2.2",
            vite: "^5.0.8"
          }
        }, null, 2),
        description: "Package configuration"
      }
    ],
    dependencies: ["react", "react-dom", "@types/react", "@types/react-dom", "vite", "typescript", "tailwindcss"],
    scripts: {
      dev: "vite",
      build: "tsc && vite build",
      preview: "vite preview"
    }
  },
  {
    name: "express-typescript",
    language: "typescript",
    framework: "express",
    files: [
      {
        path: "src/index.ts",
        content: `import express from 'express';
import cors from 'cors';
import helmet from 'helmet';

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());

// Routes
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

app.get('/api/users', (req, res) => {
  res.json({ users: [] });
});

app.listen(PORT, () => {
  console.log(\`Server running on port \${PORT}\`);
});`,
        description: "Express server entry point"
      },
      {
        path: "package.json",
        content: JSON.stringify({
          name: "express-typescript-api",
          version: "1.0.0",
          description: "Express TypeScript API",
          main: "dist/index.js",
          scripts: {
            build: "tsc",
            start: "node dist/index.js",
            dev: "ts-node-dev --respawn src/index.ts",
            test: "jest"
          },
          dependencies: {
            express: "^4.18.2",
            cors: "^2.8.5",
            helmet: "^7.1.0"
          },
          devDependencies: {
            "@types/express": "^4.17.21",
            "@types/cors": "^2.8.17",
            "@types/node": "^20.10.4",
            "ts-node-dev": "^2.0.0",
            typescript: "^5.3.3"
          }
        }, null, 2),
        description: "Package configuration"
      }
    ],
    dependencies: ["express", "cors", "helmet", "@types/express", "@types/cors", "@types/node", "typescript"],
    scripts: {
      build: "tsc",
      start: "node dist/index.js",
      dev: "ts-node-dev --respawn src/index.ts"
    }
  },
  {
    name: "nextjs-typescript",
    language: "typescript",
    framework: "nextjs",
    files: [
      {
        path: "pages/index.tsx",
        content: `import { NextPage } from 'next';
import Head from 'next/head';

const Home: NextPage = () => {
  return (
    <div>
      <Head>
        <title>Next.js TypeScript App</title>
        <meta name="description" content="Generated by AI" />
      </Head>

      <main className="min-h-screen flex items-center justify-center bg-gray-100">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-gray-800 mb-4">
            Welcome to Next.js!
          </h1>
          <p className="text-gray-600">
            Get started by editing pages/index.tsx
          </p>
        </div>
      </main>
    </div>
  );
};

export default Home;`,
        description: "Home page component"
      },
      {
        path: "package.json",
        content: JSON.stringify({
          name: "nextjs-typescript-app",
          version: "0.1.0",
          private: true,
          scripts: {
            dev: "next dev",
            build: "next build",
            start: "next start",
            lint: "next lint"
          },
          dependencies: {
            next: "14.0.4",
            react: "^18",
            "react-dom": "^18"
          },
          devDependencies: {
            typescript: "^5",
            "@types/node": "^20",
            "@types/react": "^18",
            "@types/react-dom": "^18",
            autoprefixer: "^10.0.1",
            postcss: "^8",
            tailwindcss: "^3.3.0"
          }
        }, null, 2),
        description: "Package configuration"
      }
    ],
    dependencies: ["next", "react", "react-dom", "typescript", "@types/node", "@types/react", "tailwindcss"],
    scripts: {
      dev: "next dev",
      build: "next build",
      start: "next start"
    }
  }
];

export function getTemplate(language: string, framework?: string): Template | null {
  return templates.find(t => 
    t.language === language && 
    (!framework || t.framework === framework)
  ) || null;
}

export function getAllTemplates(): Template[] {
  return templates;
}

export function getTemplatesByLanguage(language: string): Template[] {
  return templates.filter(t => t.language === language);
}