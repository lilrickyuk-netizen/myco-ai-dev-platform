import { api } from "encore.dev/api";
import type { ChatMessage, GenerateRequest, GenerateResponse } from "./types";

export const generate = api(
  { expose: true, method: "POST", path: "/ai/generate" },
  async (req: GenerateRequest): Promise<GenerateResponse> => {
    try {
      const aiEngineUrl = process.env.AI_ENGINE_URL || "http://ai-engine:8001";
      
      const response = await fetch(`${aiEngineUrl}/generation`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          prompt: req.prompt,
          model: req.model || "gpt-3.5-turbo",
          messages: [{ role: "user", content: req.prompt }]
        })
      });

      if (!response.ok) {
        throw new Error(`AI Engine error: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.error) {
        throw new Error(data.error);
      }

      return {
        content: data.choices?.[0]?.message?.content || "No response from AI",
        usage: {
          promptTokens: data.usage?.prompt_tokens || 0,
          completionTokens: data.usage?.completion_tokens || 0,
          totalTokens: data.usage?.total_tokens || 0,
        }
      };
    } catch (error) {
      console.error("AI generation error:", error);
      
      // Return stub response if AI engine is unavailable
      return {
        content: `AI service temporarily unavailable. Stub response for: "${req.prompt}"\n\nThis would normally be generated by an AI model. Configure AI_PROVIDER and API keys to enable full functionality.`,
        usage: {
          promptTokens: req.prompt.length / 4,
          completionTokens: 50,
          totalTokens: req.prompt.length / 4 + 50,
        }
      };
    }
  }
);

export const chat = api(
  { expose: true, method: "POST", path: "/ai/chat" },
  async ({ messages }: { messages: ChatMessage[] }): Promise<ChatMessage> => {
    // Mock implementation
    return {
      id: Date.now().toString(),
      role: "assistant",
      content: `This is a mock response to: "${messages[messages.length - 1]?.content || 'your message'}"`,
      timestamp: new Date(),
    };
  }
);