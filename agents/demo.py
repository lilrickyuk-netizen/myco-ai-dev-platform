#!/usr/bin/env python3
"""
Demonstration script for the complete agent system

This script demonstrates the full capabilities of the multi-agent development platform,
including project creation, development workflow execution, and validation.
"""

import asyncio
import json
import logging
import sys
from datetime import datetime
from typing import Dict, Any

from .main_orchestrator import main_orchestrator
from .workflows.workflow_examples import run_all_examples

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class AgentSystemDemo:
    """Complete demonstration of the agent system capabilities"""
    
    def __init__(self):
        self.orchestrator = main_orchestrator
        self.demo_results = {}
        
    async def run_complete_demo(self):
        """Run the complete demonstration"""
        
        print("üöÄ " + "=" * 80)
        print("üöÄ MYCO AI DEVELOPMENT PLATFORM - AGENT SYSTEM DEMONSTRATION")
        print("üöÄ " + "=" * 80)
        print(f"üöÄ Started at: {datetime.utcnow().isoformat()}")
        print("üöÄ " + "=" * 80)
        
        # Demo scenarios
        demo_scenarios = [
            ("System Overview", self._demo_system_overview),
            ("Quick Prototype", self._demo_quick_prototype),
            ("Backend API Development", self._demo_backend_api),
            ("Full-Stack Application", self._demo_full_stack_app),
            ("Validation Suite", self._demo_validation_suite),
            ("Project Management", self._demo_project_management)
        ]
        
        total_scenarios = len(demo_scenarios)
        successful_scenarios = 0
        
        for i, (scenario_name, scenario_func) in enumerate(demo_scenarios, 1):
            print(f\"\\nüìã [{i}/{total_scenarios}] {scenario_name}\")\n            print(\"‚îÄ\" * 60)\n            \n            try:\n                result = await scenario_func()\n                self.demo_results[scenario_name] = {\n                    \"status\": \"success\",\n                    \"result\": result\n                }\n                successful_scenarios += 1\n                print(f\"‚úÖ {scenario_name} completed successfully!\")\n                \n            except Exception as e:\n                self.demo_results[scenario_name] = {\n                    \"status\": \"error\",\n                    \"error\": str(e)\n                }\n                logger.error(f\"‚ùå {scenario_name} failed: {e}\")\n                print(f\"‚ùå {scenario_name} failed: {e}\")\n        \n        # Generate final report\n        await self._generate_demo_report(successful_scenarios, total_scenarios)\n    \n    async def _demo_system_overview(self) -> Dict[str, Any]:\n        \"\"\"Demonstrate system overview and capabilities\"\"\"\n        \n        print(\"üìä System Overview:\")\n        \n        # List available workflow templates\n        templates = self.orchestrator.list_available_workflows()\n        print(f\"   ‚Ä¢ Available workflow templates: {len(templates)}\")\n        for template in templates:\n            print(f\"     - {template['name']}: {template['description']}\")\n        \n        # List active projects\n        projects = self.orchestrator.list_projects()\n        print(f\"   ‚Ä¢ Active projects: {len(projects)}\")\n        \n        # Show agent capabilities\n        agent_capabilities = {}\n        for agent_name, agent in self.orchestrator.agents.items():\n            agent_capabilities[agent_name] = agent.capabilities\n            print(f\"   ‚Ä¢ {agent_name.title()} Agent: {len(agent.capabilities)} capabilities\")\n        \n        return {\n            \"available_templates\": len(templates),\n            \"active_projects\": len(projects),\n            \"agent_capabilities\": agent_capabilities,\n            \"system_status\": \"operational\"\n        }\n    \n    async def _demo_quick_prototype(self) -> Dict[str, Any]:\n        \"\"\"Demonstrate quick prototype development\"\"\"\n        \n        print(\"‚ö° Quick Prototype Development:\")\n        \n        # Define prototype project\n        prototype_config = {\n            \"name\": \"Smart Todo Assistant\",\n            \"description\": \"AI-powered todo list with smart prioritization\",\n            \"type\": \"quick_prototype\",\n            \"requirements\": {\n                \"core_features\": [\n                    \"Add and manage todo items\",\n                    \"AI-based priority suggestions\",\n                    \"Simple dashboard interface\",\n                    \"Export functionality\"\n                ],\n                \"target_users\": \"busy professionals\",\n                \"complexity\": \"minimal\"\n            },\n            \"tech_stack\": [\"React\", \"Node.js\", \"Express\"],\n            \"team_info\": {\n                \"skills\": [\"JavaScript\", \"React\", \"Node.js\"]\n            },\n            \"workspace_path\": \"/tmp/demo_prototype\",\n            \"demo_scenarios\": [\n                \"Add multiple todos\",\n                \"View AI priority suggestions\",\n                \"Mark todos as complete\",\n                \"Export todo list\"\n            ]\n        }\n        \n        print(\"   ‚Ä¢ Creating prototype project...\")\n        project_result = await self.orchestrator.create_project(prototype_config)\n        print(f\"   ‚Ä¢ Project created: {project_result['project_id']}\")\n        \n        print(\"   ‚Ä¢ Starting development workflow...\")\n        development_result = await self.orchestrator.start_development(project_result['project_id'])\n        print(f\"   ‚Ä¢ Development completed with status: {development_result['status']}\")\n        print(f\"   ‚Ä¢ Files generated: {development_result['files_generated']}\")\n        print(f\"   ‚Ä¢ Quality score: {development_result['quality_score']:.1f}\")\n        \n        return {\n            \"project_id\": project_result['project_id'],\n            \"development_status\": development_result['status'],\n            \"files_generated\": development_result['files_generated'],\n            \"quality_score\": development_result['quality_score']\n        }\n    \n    async def _demo_backend_api(self) -> Dict[str, Any]:\n        \"\"\"Demonstrate backend API development\"\"\"\n        \n        print(\"üîß Backend API Development:\")\n        \n        # Define API project\n        api_config = {\n            \"name\": \"Project Management API\",\n            \"description\": \"RESTful API for project and task management\",\n            \"type\": \"backend_api_only\",\n            \"requirements\": {\n                \"entities\": [\"users\", \"projects\", \"tasks\", \"comments\"],\n                \"authentication\": \"JWT with refresh tokens\",\n                \"features\": [\n                    \"User registration and authentication\",\n                    \"Project CRUD operations\",\n                    \"Task management with assignments\",\n                    \"File upload and management\",\n                    \"Real-time notifications\"\n                ],\n                \"performance_requirements\": \"Handle 1000+ concurrent users\",\n                \"security_requirements\": \"Enterprise-grade security\"\n            },\n            \"tech_stack\": [\"TypeScript\", \"Encore.ts\", \"PostgreSQL\"],\n            \"team_info\": {\n                \"skills\": [\"TypeScript\", \"Node.js\", \"PostgreSQL\", \"REST APIs\"]\n            },\n            \"workspace_path\": \"/tmp/demo_api\",\n            \"entities\": [\"users\", \"projects\", \"tasks\", \"comments\"],\n            \"test_scenarios\": [\n                \"User authentication flow\",\n                \"Project creation and management\",\n                \"Task assignment and updates\",\n                \"API rate limiting\",\n                \"Error handling scenarios\"\n            ]\n        }\n        \n        print(\"   ‚Ä¢ Creating API project...\")\n        project_result = await self.orchestrator.create_project(api_config)\n        print(f\"   ‚Ä¢ Project created: {project_result['project_id']}\")\n        \n        print(\"   ‚Ä¢ Starting development workflow...\")\n        development_result = await self.orchestrator.start_development(project_result['project_id'])\n        print(f\"   ‚Ä¢ Development completed with status: {development_result['status']}\")\n        print(f\"   ‚Ä¢ Files generated: {development_result['files_generated']}\")\n        print(f\"   ‚Ä¢ Quality score: {development_result['quality_score']:.1f}\")\n        \n        return {\n            \"project_id\": project_result['project_id'],\n            \"development_status\": development_result['status'],\n            \"files_generated\": development_result['files_generated'],\n            \"quality_score\": development_result['quality_score']\n        }\n    \n    async def _demo_full_stack_app(self) -> Dict[str, Any]:\n        \"\"\"Demonstrate full-stack application development\"\"\"\n        \n        print(\"üåê Full-Stack Application Development:\")\n        \n        # Define full-stack project\n        fullstack_config = {\n            \"name\": \"Team Collaboration Platform\",\n            \"description\": \"Complete platform for team collaboration and project management\",\n            \"type\": \"full_stack_web_app\",\n            \"requirements\": {\n                \"features\": [\n                    \"User authentication and profiles\",\n                    \"Real-time team messaging\",\n                    \"Project and task management\",\n                    \"File sharing and version control\",\n                    \"Team analytics and reporting\",\n                    \"Mobile-responsive design\"\n                ],\n                \"user_roles\": [\"admin\", \"project_manager\", \"team_member\", \"guest\"],\n                \"scalability\": \"Support 500+ concurrent users\",\n                \"performance\": \"Page load time < 2 seconds\",\n                \"accessibility\": \"WCAG 2.1 AA compliance\"\n            },\n            \"tech_stack\": [\"React\", \"TypeScript\", \"Encore.ts\", \"PostgreSQL\", \"Redis\"],\n            \"team_info\": {\n                \"skills\": [\"React\", \"TypeScript\", \"Node.js\", \"PostgreSQL\", \"Docker\"]\n            },\n            \"design_preferences\": {\n                \"theme\": \"modern_professional\",\n                \"color_scheme\": \"blue_gradient\",\n                \"component_library\": \"custom_with_shadcn\"\n            },\n            \"workspace_path\": \"/tmp/demo_fullstack\",\n            \"responsive\": {\n                \"breakpoints\": [\"mobile\", \"tablet\", \"desktop\", \"large_desktop\"],\n                \"mobile_first\": True\n            },\n            \"user_flows\": [\n                \"User registration and onboarding\",\n                \"Creating and managing projects\",\n                \"Team collaboration workflow\",\n                \"File upload and sharing\",\n                \"Real-time messaging\"\n            ]\n        }\n        \n        print(\"   ‚Ä¢ Creating full-stack project...\")\n        project_result = await self.orchestrator.create_project(fullstack_config)\n        print(f\"   ‚Ä¢ Project created: {project_result['project_id']}\")\n        print(f\"   ‚Ä¢ Estimated duration: {project_result['estimated_duration']}\")\n        print(f\"   ‚Ä¢ Complexity score: {project_result['complexity_score']}\")\n        \n        print(\"   ‚Ä¢ Starting development workflow...\")\n        development_result = await self.orchestrator.start_development(project_result['project_id'])\n        print(f\"   ‚Ä¢ Development completed with status: {development_result['status']}\")\n        print(f\"   ‚Ä¢ Files generated: {development_result['files_generated']}\")\n        print(f\"   ‚Ä¢ Quality score: {development_result['quality_score']:.1f}\")\n        print(f\"   ‚Ä¢ Duration: {development_result.get('duration_seconds', 0):.1f} seconds\")\n        \n        return {\n            \"project_id\": project_result['project_id'],\n            \"development_status\": development_result['status'],\n            \"files_generated\": development_result['files_generated'],\n            \"quality_score\": development_result['quality_score'],\n            \"duration_seconds\": development_result.get('duration_seconds', 0)\n        }\n    \n    async def _demo_validation_suite(self) -> Dict[str, Any]:\n        \"\"\"Demonstrate comprehensive validation capabilities\"\"\"\n        \n        print(\"üîç Validation Suite Demonstration:\")\n        \n        # Use the full-stack project from previous demo for validation\n        projects = self.orchestrator.list_projects()\n        if not projects:\n            print(\"   ‚Ä¢ No projects available for validation\")\n            return {\"status\": \"skipped\", \"reason\": \"no_projects\"}\n        \n        # Get the most recent project\n        latest_project = projects[0]\n        project_id = latest_project['project_id']\n        \n        print(f\"   ‚Ä¢ Running validation on project: {latest_project['name']}\")\n        \n        # Run comprehensive validation\n        validation_config = {\n            \"quality_standards\": {\n                \"min_test_coverage\": 80,\n                \"max_complexity\": 10,\n                \"max_duplicated_lines\": 3\n            },\n            \"security_requirements\": {\n                \"vulnerability_threshold\": \"medium\",\n                \"secret_scanning\": True,\n                \"dependency_audit\": True\n            },\n            \"performance_targets\": {\n                \"response_time_ms\": 200,\n                \"throughput_rps\": 1000,\n                \"memory_usage_mb\": 512\n            },\n            \"compliance_standards\": [\"GDPR\", \"WCAG_2_1_AA\"]\n        }\n        \n        validation_result = await self.orchestrator.validate_project(project_id, validation_config)\n        \n        print(f\"   ‚Ä¢ Validation completed with status: {validation_result.get('status')}\")\n        print(f\"   ‚Ä¢ Overall score: {validation_result.get('overall_score', 0):.1f}\")\n        \n        # Show validation breakdown\n        if 'validations' in validation_result:\n            for validation_type, result in validation_result['validations'].items():\n                status_icon = \"‚úÖ\" if result.get('status') == 'passed' else \"‚ùå\"\n                score = result.get(f'{validation_type}_score', result.get('score', 0))\n                print(f\"     {status_icon} {validation_type.replace('_', ' ').title()}: {score:.1f}\")\n        \n        return {\n            \"project_id\": project_id,\n            \"validation_status\": validation_result.get('status'),\n            \"overall_score\": validation_result.get('overall_score', 0),\n            \"validations_run\": len(validation_result.get('validations', {})),\n            \"failed_validations\": len(validation_result.get('failed_validations', []))\n        }\n    \n    async def _demo_project_management(self) -> Dict[str, Any]:\n        \"\"\"Demonstrate project management capabilities\"\"\"\n        \n        print(\"üìä Project Management Demonstration:\")\n        \n        # List all projects\n        projects = self.orchestrator.list_projects()\n        print(f\"   ‚Ä¢ Total projects: {len(projects)}\")\n        \n        project_stats = {\n            \"total_projects\": len(projects),\n            \"project_statuses\": {},\n            \"project_details\": []\n        }\n        \n        # Get detailed status for each project\n        for project in projects:\n            project_id = project['project_id']\n            try:\n                detailed_status = await self.orchestrator.get_project_status(project_id)\n                \n                status = detailed_status.get('status', 'unknown')\n                project_stats['project_statuses'][status] = project_stats['project_statuses'].get(status, 0) + 1\n                \n                project_details = {\n                    \"id\": project_id,\n                    \"name\": detailed_status.get('name'),\n                    \"status\": status,\n                    \"files_count\": detailed_status.get('files_in_workspace', 0)\n                }\n                \n                project_stats['project_details'].append(project_details)\n                \n                print(f\"     ‚Ä¢ {detailed_status.get('name')}: {status} ({detailed_status.get('files_in_workspace', 0)} files)\")\n                \n            except Exception as e:\n                logger.warning(f\"Could not get status for project {project_id}: {e}\")\n        \n        # Show status distribution\n        print(\"   ‚Ä¢ Status distribution:\")\n        for status, count in project_stats['project_statuses'].items():\n            print(f\"     - {status}: {count}\")\n        \n        return project_stats\n    \n    async def _generate_demo_report(self, successful: int, total: int):\n        \"\"\"Generate final demonstration report\"\"\"\n        \n        print(\"\\n\" + \"=\" * 80)\n        print(\"üìã DEMONSTRATION SUMMARY REPORT\")\n        print(\"=\" * 80)\n        \n        success_rate = (successful / total * 100) if total > 0 else 0\n        \n        print(f\"Total scenarios: {total}\")\n        print(f\"Successful: {successful}\")\n        print(f\"Failed: {total - successful}\")\n        print(f\"Success rate: {success_rate:.1f}%\")\n        \n        print(\"\\nüìä DETAILED RESULTS:\")\n        print(\"-\" * 40)\n        \n        for scenario_name, result in self.demo_results.items():\n            status_icon = \"‚úÖ\" if result['status'] == 'success' else \"‚ùå\"\n            print(f\"{status_icon} {scenario_name}\")\n            \n            if result['status'] == 'success' and 'result' in result:\n                scenario_result = result['result']\n                \n                # Show key metrics if available\n                if 'files_generated' in scenario_result:\n                    print(f\"   ‚Ä¢ Files generated: {scenario_result['files_generated']}\")\n                if 'quality_score' in scenario_result:\n                    print(f\"   ‚Ä¢ Quality score: {scenario_result['quality_score']:.1f}\")\n                if 'overall_score' in scenario_result:\n                    print(f\"   ‚Ä¢ Overall score: {scenario_result['overall_score']:.1f}\")\n                if 'total_projects' in scenario_result:\n                    print(f\"   ‚Ä¢ Total projects: {scenario_result['total_projects']}\")\n            \n            elif result['status'] == 'error':\n                print(f\"   ‚Ä¢ Error: {result['error']}\")\n        \n        print(\"\\nüéØ SYSTEM CAPABILITIES DEMONSTRATED:\")\n        print(\"-\" * 40)\n        print(\"‚úÖ Multi-agent workflow orchestration\")\n        print(\"‚úÖ Complete project lifecycle management\")\n        print(\"‚úÖ Full-stack application generation\")\n        print(\"‚úÖ Backend API development\")\n        print(\"‚úÖ Quick prototyping capabilities\")\n        print(\"‚úÖ Comprehensive validation suite\")\n        print(\"‚úÖ Project status tracking and management\")\n        print(\"‚úÖ Quality scoring and recommendations\")\n        \n        print(\"\\nüöÄ AGENT SYSTEM DEMONSTRATION COMPLETED\")\n        print(f\"üöÄ Completed at: {datetime.utcnow().isoformat()}\")\n        print(\"üöÄ \" + \"=\" * 80)\n\nasync def main():\n    \"\"\"Main demonstration entry point\"\"\"\n    \n    demo = AgentSystemDemo()\n    await demo.run_complete_demo()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())